// <auto-generated />
using System;
using BlogApi.Persistance.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlogApi.Persistance.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240928173906_mig3")]
    partial class mig3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BlogApi.Domain.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Keyword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Content = "Doloremque sit gül okuma nostrum sequi sinema voluptate çorba totam sinema bundan velit ipsum eve anlamsız öyle açılmadan bundan iure için türemiş dolorem filmini sunt ki consequatur ama koyun exercitationem layıkıyla gülüyorum perferendis dağılımı mi çobanın iure ekşili consequatur amet nihil laboriosam inventore qui architecto sed ki mıknatıslı mıknatıslı hesap açılmadan masanın voluptatem domates magnam voluptate non inventore değirmeni kalemi nemo salladı veniam layıkıyla qui umut dolorem ve domates çobanın et balıkhaneye quam inventore dolorem düşünüyor perferendis esse sequi çobanın velit olduğu consequuntur layıkıyla ipsam praesentium molestiae eve quasi patlıcan consectetur voluptas gülüyorum beğendim vitae eve numquam duyulmamış eius perferendis.",
                            CreatedDate = new DateTime(2024, 9, 28, 20, 39, 5, 974, DateTimeKind.Local).AddTicks(9250),
                            Description = "",
                            IsDeleted = false,
                            Keyword = "",
                            TagId = 1,
                            Title = "Generic Soft Chair"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Content = "Gördüm molestiae consequuntur lambadaki sayfası consequatur dolores beatae batarya ducimus dağılımı voluptas alias un gül et cezbelendi de minima sit sıradanlıktan dolayı beatae olduğu eaque nisi aliquam tv labore sayfası rem değirmeni sit anlamsız şafak sarmal dolorem vitae magni voluptatem consequuntur consequatur adresini nostrum totam masanın sed aut doğru quia dergi ex aut deleniti quae odio un koyun nisi veniam lambadaki nostrum eve laboriosam kutusu enim gitti sinema koştum quia.",
                            CreatedDate = new DateTime(2024, 9, 28, 20, 39, 5, 974, DateTimeKind.Local).AddTicks(9527),
                            Description = "",
                            IsDeleted = false,
                            Keyword = "",
                            TagId = 2,
                            Title = "Unbranded Wooden Bike"
                        });
                });

            modelBuilder.Entity("BlogApi.Domain.Entities.ArticleCategory", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("ArticleId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ArticleCategories");
                });

            modelBuilder.Entity("BlogApi.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("Priorty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "ASP.NET CORE",
                            CreatedDate = new DateTime(2024, 9, 28, 20, 39, 5, 975, DateTimeKind.Local).AddTicks(1493),
                            IsDeleted = false,
                            ParentId = 0,
                            Priorty = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "C#",
                            CreatedDate = new DateTime(2024, 9, 28, 20, 39, 5, 975, DateTimeKind.Local).AddTicks(1494),
                            IsDeleted = false,
                            ParentId = 0,
                            Priorty = 2
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "ASP.NET CORE 2.0",
                            CreatedDate = new DateTime(2024, 9, 28, 20, 39, 5, 975, DateTimeKind.Local).AddTicks(1496),
                            IsDeleted = false,
                            ParentId = 1,
                            Priorty = 1
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "C# 6.0",
                            CreatedDate = new DateTime(2024, 9, 28, 20, 39, 5, 975, DateTimeKind.Local).AddTicks(1498),
                            IsDeleted = false,
                            ParentId = 2,
                            Priorty = 1
                        });
                });

            modelBuilder.Entity("BlogApi.Domain.Entities.Detail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Details");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2024, 9, 28, 20, 39, 5, 976, DateTimeKind.Local).AddTicks(8989),
                            Description = "Labore beatae blanditiis hesap quam.",
                            IsDeleted = false,
                            Title = "Amet."
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2024, 9, 28, 20, 39, 5, 976, DateTimeKind.Local).AddTicks(9049),
                            Description = "Tv orta sandalye inventore mıknatıslı.",
                            IsDeleted = true,
                            Title = "Vitae suscipit."
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 4,
                            CreatedDate = new DateTime(2024, 9, 28, 20, 39, 5, 976, DateTimeKind.Local).AddTicks(9086),
                            Description = "Mutlu qui consequatur sed aut.",
                            IsDeleted = false,
                            Title = "Masanın gitti incidunt."
                        });
                });

            modelBuilder.Entity("BlogApi.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 9, 28, 20, 39, 5, 978, DateTimeKind.Local).AddTicks(9568),
                            IsDeleted = false,
                            Name = "Toys"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 9, 28, 20, 39, 5, 978, DateTimeKind.Local).AddTicks(9625),
                            IsDeleted = false,
                            Name = "Shoes, Home & Books"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 9, 28, 20, 39, 5, 978, DateTimeKind.Local).AddTicks(9641),
                            IsDeleted = true,
                            Name = "Garden, Clothing & Games"
                        });
                });

            modelBuilder.Entity("BlogApi.Domain.Entities.Article", b =>
                {
                    b.HasOne("BlogApi.Domain.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("BlogApi.Domain.Entities.ArticleCategory", b =>
                {
                    b.HasOne("BlogApi.Domain.Entities.Article", "Article")
                        .WithMany("ArticleCategories")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogApi.Domain.Entities.Category", "Category")
                        .WithMany("ArticleCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BlogApi.Domain.Entities.Detail", b =>
                {
                    b.HasOne("BlogApi.Domain.Entities.Category", "Category")
                        .WithMany("Details")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BlogApi.Domain.Entities.Article", b =>
                {
                    b.Navigation("ArticleCategories");
                });

            modelBuilder.Entity("BlogApi.Domain.Entities.Category", b =>
                {
                    b.Navigation("ArticleCategories");

                    b.Navigation("Details");
                });
#pragma warning restore 612, 618
        }
    }
}
